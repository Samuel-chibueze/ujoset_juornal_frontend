generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Use "postgresql" or "mysql" for production
  url      = env("DATABASE_URL")
}

enum ArticleStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          String    @default("PUBLISHER")

  accounts  Account[]
  sessions  Session[]
  articles  Article[]    @relation("PublisherArticles")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  issn        String?  @unique
  volumes     Volume[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Volume {
  id         String   @id @default(uuid())
  number     Int
  year       Int
  journalId  String
  journal    Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)
  issues     Issue[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([journalId, number])
}

model Issue {
  id         String   @id @default(uuid())
  number     Int
  title      String?
  month      Int?
  volumeId   String
  volume     Volume   @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  articles   Article[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([volumeId, number])
}

model Article {
  id              String        @id @default(uuid())
  title           String
  slug            String        @unique
  authors         String
  abstract        String?
  fileUrl         String
  status          ArticleStatus @default(DRAFT)
  paymentProof    String?
  paymentVerified Boolean       @default(false)
  issueId         String?       // ❗️ Make this optional
  issue           Issue?        @relation(fields: [issueId], references: [id], onDelete: Cascade)
  publisherId     String
  publisher       User          @relation("PublisherArticles", fields: [publisherId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([status])
  @@index([createdAt])
}
